DATABASE
Assignment 6
Submission Date: 4th Aug 2020

51.	Define cursors give different types of cursors?

	Cursor is a Temporary Memory or Temporary Work Station.It is Allocated by Database Server at the Time of Performing DML operations on Table by User.Cursors
	are used to store Database Tables.There are 2 types of Cursors: Implicit Cursors, and Explicit Cursors.These are explained as following below.
	Implicit Cursors:Implicit Cursors are also known as Default Cursors of SQL SERVER. These Cursors are allocated by SQL SERVER when the user performs DML
			 operations.
	Explicit Cursors:Explicit Cursors are Created by Users whenever the user requires them. Explicit Cursors are used for Fetching data from Table in Row-By-Row 
			 Manner.


52.	Define data and information, and how are they related in a database?

Data is a raw and unorganized fact that required to be processed to make it meaningful.
Information is a set of data which is processed in a meaningful way according to the given requirement. Information is processed, structured, or presented in a given 
context to make it meaningful and useful.

53.	Explain Enterprise Resource Planning (ERP), and what kind of a database is used in an ERP application?

Enterprise Resource Planning (ERP) is an information system used in manufacturing companies and includes sales, inventory, production planning, purchasing and other 
business functions. An ERP system typically uses a multiuser database.
ERP stands for Enterprise Resource Planning and refers to software and systems used to plan and manage all the core supply chain, manufacturing, services, financial 
and other processes of an organization. Enterprise Resource Planning software can be used to automate and simplify individual activities across a business or organizati-
on, such as accounting and procurement, project management, customer relationship management, risk management, compliance and supply chain operations. 


54.	Write an SQL SELECT statement to display all the columns of the STUDENT table but only those rows where the Grade column is greater than or equal to 90.

	SELECT *From Student where grade>= 90;

55.	Name and briefly Write in brief the five SQL built-in functions.

1)SQL has many built-in functions for performing processing on string or numeric data. −
2)SQL COUNT Function - The SQL COUNT aggregate function is used to count the number of rows in a database table.
3)SQL MAX Function - The SQL MAX aggregate function allows us to select the highest (maximum) value for a certain column.
4)SQL MIN Function - The SQL MIN aggregate function allows us to select the lowest (minimum) value for a certain column.
5)SQL AVG Function - The SQL AVG aggregate function selects the average value for certain table column.
)SQL SUM Function - The SQL SUM aggregate function allows selecting the total for a numeric column.

56.	Write an SQL SELECT statement to count the number of rows in STUDENT table and display the result with the label NumStudents.

 SELECT COUNT(*) AS NumStudents FROM STUDENT;

57.	Explain an SQL subquery?

In SQL a Subquery can be simply defined as a query within another query. In other words we can say that a Subquery is a query that is embedded in WHERE clause of 
another SQL query.
SYNTAX:
SELECT column_name FROM table_name
WHERE column_name expression operator 
    ( SELECT COLUMN_NAME  from TABLE_NAME   WHERE ... );

58.	Explain a foreign key, and explain it used for?

Foreign keys are the columns of a table that points to the primary key of another table. They act as a cross-reference between tables.
A FOREIGN KEY is a key used to link two tables together. A FOREIGN KEY is a field (or collection of fields) in one table that refers to the PRIMARY KEY in another table

59.	Define the steps for transforming an entity into a table?

Step1:
Clearly identify the primary key and attributes for each entity defined in the E-R model.
Step 2: Group together tables (formerly entities) and their relationships that have a cardinality of one relationships with 0:1 or 1:1 for their opt:card. (Optionality says
what can and must happen in a relationship, and cardinality indicates the number of entity occurrences in a relationship)That is, absorb relationships where the
cardinality is one into the corresponding tables.
• Maintain the initial structure for the absorbing table – do not change its primary key or any of its attributes.
• The primary key of the other table in the relationship becomes a foreign key in the absorbing table. This is indicated by an FK in the absorbing table.
• If the cardinality between the absorbed relationship and the other table in the relationship was N (0:N or 1:N), then the modified table becomes the many part of
a one-to-many relationship in the new relational model.
• Otherwise, if the cardinality between the absorbed relationship and the other table in the relationship was 1 (0:1 or 1:1), then the new relationship becomes a one-toone relationship in the new relational model (not shown).
Step 3: The remaining relationships whose cardinalities are N (1:N or 0:N) on both sides become new tables in the new relational model.
• The primary keys from the two tables involved in the relationship become a composite primary key in the new table, and the new table usually has a name that
is a combined form of the two original table names.
•The newly created table becomes the many part of the relationship between both tables, and thus creates a many-to-many relationship between the two pre-existing
tables. 


60.	Explain a surrogate key, Write in brief the ideal primary key and Write in brief how surrogate keys meet this ideal

The ideal primary key is short, numeric and fixed. A surrogate key is a unique, DBMS-supplied identifier intended to be used as the primary key of a table. Further,
the DBMS will not allow the value of a surrogate key to be changed. The values of a surrogate key have no meaning to the users and are usually hidden on forms and 
reports. By design, they are short, numeric and fixed and thus meet the definition of the ideal primary key.

61.	Explain a cascading update?

Referential integrity constraints require that foreign key values in one table correspond to primary key values in another. If the value of the primary key is changed 
-- that is, updated -- the value of the foreign key must immediately be changed to match it. Cascading updates will set this change to be done automatically by the 
DBMS whenever necessary.

62.	Explain a SQL view? Briefly Write in brief the use of views.

Views in SQL are kind of virtual tables. A view also has rows and columns as they are in a real table in the database. We can create a view by selecting fields from 
one or more tables present in the database. A View can either have all the rows of a table or specific rows based on certain condition.
Views are used for security purposes because they provide encapsulation of the name of the table. Data is in the virtual table, not stored permanently. Views display
only selected data. We can also use Sql Join s in the Select statement in deriving the data for the view.

63.	Write in brief how to add a NOT NULL column to a table.

ALTER the table by adding the column with NOT NULL constraint by giving DEFAULT values.
ALTER table TableName ADD NewColumn DataType NOT NULL DEFAULT;

64.	You have two tables, EMPLOYEE and COMPUTER that are in a one-to-one relationship. The foreign key is EmpNumber in COMPUTER which references EmpNumber as the primary key of EMPLOYEE. Write in brief what must be done to convert the one-to-one EMPLOYEE-COMPUTER relationship to a one-to-many relationship where one employee can have more than one computer.

The table on the "one" side i.e "EMPLOYEE" of the "one-to-many" relationship should have a primary key column. The other table "COMPUTER" should have a foreign-key defined pointing to the
primary key on the first table "EMPLOYEE". To return results from both tables add an INNER JOIN clause to join both tables.


65.	Write in brief what we mean by an ACID transaction.

ACID PROPERTIES are used for maintaining the integrity of database during transaction processing. ACID stands for Atomicity, Consistency, Isolation, and Durability.
Atomicity: A transaction is a single unit of operation. You either execute it entirely or do not execute it at all. There cannot be partial execution.
Consistency: Once the transaction is executed, it should move from one consistent state to another.
Isolation: Transaction should be executed in isolation from other transactions (no Locks). During concurrent transaction execution, intermediate transaction results from simultaneously executed transactions should not be made available to each other. (Level 0,1,2,3)
Durability: · After successful completion of a transaction, the changes in the database should persist. Even in the case of system failures.


66.	Write in brief what needs to happen to convert a relation to third normal form.

Third normal form (3NF) is a database schema design approach for relational databases which uses normalizing principles to reduce the duplication of data, avoid data
anomalies, ensure referential integrity, and simplify data management.

67.	Explain denormalizations and why would someone consider doing so?

Denormalization is a strategy used on a previously-normalized database to increase performance. The idea behind it is to add redundant data where we think it will
help us the most. We can use extra attributes in an existing table, add new tables, or even create instances of existing tables.

68.	Compare a hierarchical and network database model?

Hierarchical Data Model:
1. Relationship between records is of the parent child type.
2. Many to many relationship cannot be expressed in this model
3. It is a simple, straightforward and natural method of implementing record relationships.
4. This type of model is useful only when there is some hierarchical character in the database.
5. Searching for a record is very difficult since one can retrieve a child only after going through its parent record.

Network Data Model:
1. Relationship between records is expressed in the form of pointers or links.
2. Many to many relationship can also be implemented in this model
3. Record relationship implementation is quite complex due to the use of pointers.
4. Network model is useful for representing such records which have many to many relationships.

69.	Write in brief the difference among a dynamic and materialized view.

1)The basic difference between View and Materialized View is that Views are not stored physically on the disk. On the other hands, Materialized Views are stored on
 the disc.
2)View can be defined as a virtual table created as a result of the query expression. However, Materialized View is a physical copy, picture or snapshot of the base
 table.
3)A view is always updated as the query creating View executes each time the View is used. On the other hands, Materialized View is updated manually or by applying 
triggers to it.
4)Materialized View responds faster than View as the Materialized View is precomputed.
5)Materialized View utilizes the memory space as it stored on the disk whereas, the View is just a display hence it do not require memory space.



70.	Briefly Write in brief the three types of SQL commands.

1)DDL(Data Definition Language) : DDL or Data Definition Language actually consists of the SQL commands that can be used to define the database schema. It simply deals with descriptions of the database schema and is used to create and modify the structure of database objects in the database.
Examples of DDL commands:
CREATE – is used to create the database or its objects (like table, index, function, views, store procedure and triggers).
DROP – is used to delete objects from the database.
ALTER-is used to alter the structure of the database.
TRUNCATE–is used to remove all records from a table, including all spaces allocated for the records are removed.
COMMENT –is used to add comments to the data dictionary.
RENAME –is used to rename an object existing in the database.

2)DQL (Data Query Language) :
DML statements are used for performing queries on the data within schema objects. The purpose of DQL Command is to get some schema relation based on the query passed
to it.
Example of DQL:
SELECT – is used to retrieve data from the a database.

3)DML(Data Manipulation Language) : The SQL commands that deals with the manipulation of data present in the database belong to DML or Data Manipulation Language and this includes most of the SQL statements.
Examples of DML:
INSERT – is used to insert data into a table.
UPDATE – is used to update existing data within a table.
DELETE – is used to delete records from a database table.

71.	Define the steps to follow when preparing to create a table?

 create tables using the CREATE TABLE command, followed by your table's information. To create a basic employee record, you would enter the following command: 
CREATE TABLE employees (id INT, lastname VARCHAR(20), firstname VARCHAR(20), phone VARCHAR(20),  dateofbirth DATE)

72.	Write in brief a join among tables
The SQL Joins clause is used to combine records from two or more tables in a database.
A JOIN is a means for combining fields from two tables by using values common to each.

73.	Write in brief and contrast a trigger and a procedure.
1. Procedures :
A procedure is a combination of SQL statements written to perform a specified tasks. It helps in code re-usability and saves time and lines of code.
We can define/call procedures inside another procedure.

2. Triggers :
A trigger is a special kind of procedure which executes only when some triggering event such as INSERT, UPDATE, DELETE operations occurs in a table.
Only nesting of triggers can be achieved in a table. We cannot define/call a trigger inside another trigger.


74.	Briefly Write in brief an outer join.

Outer join is an operation that returns a combined tuples from a specified table even the join condition will fail. There are three types of outer join in SQL i.e.
Left Outer Join: Returns all the rows from the LEFT table and matching records between both the tables.
Right Outer Join: Returns all the rows from the RIGHT table and matching records between both the tables. 
Full Outer Join: It combines the result of the Left Outer Join and Right Outer Join.



75.	Write in brief a subquery.
In SQL a Subquery can be simply defined as a query within another query. In other words we can say that a Subquery is a query that is embedded in WHERE clause of 
another SQL query.

76.	Write in brief the difference among two and three-tier architectures.

TWO-TIER DATABASE ARCHITECTURE
It is a Client-Server Architecture.
In two-tier, the application logic is either buried inside the user interface on the client or within the database on the server (or both).
It is easy to build and maintain.
Two-tier architecture runs slower.
It is less secured as client can communicate with database directly.
It results in performance loss whenever the users increase rapidly.
Example – Contact Management System created using MS-Access or Railway Reservation System, etc.

THREE-TIER DATABASE ARCHITECTURE
It is a Web-based application.
In three-tier, the application logic or process resides in the middle-tier, it is separated from the data and the user interface.
Three-tier architecture consists of three layers : Client Layer, Business Layer and Data Layer.
It is complex to build and maintain.
Three-tier architecture runs faster.
It is secured as client is not allowed to communicate with database directly.
It results in performance loss whenever the system is run on Internet but gives more performance than two-tier architecture.
Example – Designing registration form which contains text box, label, button or a large website on the Internet, etc.


77.	Write in brief a data warehouse.

A data warehouse (DW) is a collection of corporate information and data derived from operational systems and external data sources.
A data warehouse is designed to support business decisions by allowing data consolidation, analysis and reporting at different aggregate levels. 
Data is populated into the DW through the processes of extraction, transformation and loading.

78.	Write in brief the differences among a data warehouse and data mart.
Data Warehouse is a large repository of data collected from different sources whereas Data Mart is only subtype of a data warehouse.
Data Warehouse is focused on all departments in an organization whereas Data Mart focuses on a specific group.
Data Warehouse designing process is complicated whereas the Data Mart process is easy to design.
Data Warehouse takes a long time for data handling whereas Data Mart takes a short time for data handling.
Data Warehouse size range is 100 GB to 1 TB+ whereas Data Mart size is less than 100 GB.
Data Warehouse implementation process takes 1 month to 1 year whereas Data Mart takes a few months to complete the implementation process.

79.	Write in brief the difference among data and database administration.
Data Administrator (DA) :
"Person in the organization who controls the data of the database refers data administrator."
DA determines what data to be stored in database based on requirement of the organization.
DA works on such as requirements gathering, analysis, and design phases.
DA does not to be a technical person, any kind of knowledge about database technology can be more beneficiary
DA is some senior level person in the organization. in short, DA is a business focused person but should understand about the database technology.

Database Administrator (DBA) :
"Person in the organization who controls the design and the use of the database refers database administrator."
DBA provides necessary technical support for implementing a database.
DBA works on such as design, development , testing, and operational phases.
DBA is a technical person having knowledge of database technology.
DBA does not need to be a business person. in short, DBA is a technically focused person but should understand about the business to administrator the database effectively.


80.	Define some of the important security features of a DBMS?
1)Authentication
Database security measures include authentication, the process of verifying if a user’s credentials match those stored in your database, and permitting only 
authenticated users access to your data, networks, and database platform.

2)Access
A primary outcome of database security is the effective limitation of access to your data. Access controls authenticate legitimate users and applications, limiting 
what they can access in your database. Access includes designing and granting appropriate user attributes and roles and limiting administrative privileges.

3)Database auditing
Monitoring (or auditing) actions as part of a database security protocol delivers centralized oversight of your database. Auditing helps to detect, deter, and reduce 
the overall impact of unauthorized access to your DBMS.

4)Backups
A data backup, as part of your database security protocol, makes a copy of your data and stores it on a separate system. This backup allows you to recover lost data 
that may result from hardware failures, data corruption, theft, hacking, or natural disasters.

5)Encryption
Database security can include the secure management of encryption keys, protection of the encryption system, management of a secure, off-site encryption backup, and
access restriction protocols.

81.	Write in brief the difference among homogeneous and heterogeneous distributed database.

1. Homogeneous Database:
In a homogeneous database, all different sites store database identically. The operating system, database management system and the data structures used – all are same
at all sites. Hence, they’re easy to manage.

2. Heterogeneous Database:
In a heterogeneous distributed database, different sites can use different schema and software that can lead to problems in query processing and transactions.
Also, a particular site might be completely unaware of the other sites. Different computers may use a different operating system, different database application.
They may even use different data models for the database. Hence, translations are required for different sites to communicate.


82.	Explain a distributed database?

A distributed database is basically a database that is not limited to one system, it is spread over different sites, i.e, on multiple computers or over a network of 
computers. A distributed database system is located on various sited that don’t share physical components. This maybe required when a particular database needs to be
accessed by various users globally. It needs to be managed such that for the users it looks like one single database.

83.	 Write a query to print Second highest salary.

SELECT name, MAX(salary) AS salary 
FROM employee 
WHERE salary  (SELECT MAX(salary) 
FROM employee);



84.	 Define different types of clauses?

1)WHERE Clause:
The MySQL WHERE Clause restricts the number of records or rows returned by the SELECT Statement. It means SELECT Statement will return the records only If the 
condition specified after the WHERE keyword is TRUE.
SYNTAX:
SELECT [Column Name 1], [Column Name 2], ...., [Column Name N]
FROM Source_Table
WHERE Conditions

2)ORDER BY:
The ORDER BY Clause can be used along with the SELECT statement to sort the data of specific fields in an ordered way. It is used to sort the result-set in ascending
or descending order.
Syntax :
SELECT column_name(s) FROM table_name ORDER BY column_name(s) ASC|DESC;

3)GROUP BY:
The GROUP BY Statement in SQL is used to arrange identical data into groups with the help of some functions. i.e if a particular column has same values in different
rows then it will arrange these rows in a group.GROUP BY clause is used with the SELECT statement.In the query, GROUP BY clause is placed after the WHERE clause.
In the query, GROUP BY clause is placed before ORDER BY clause if used any.
Syntax:
SELECT column1, function_name(column2)
FROM table_name
WHERE condition
GROUP BY column1, column2
ORDER BY column1, column2;

4)HAVING :

The HAVING Clause enables you to specify conditions that filter which group results appear in the results.HAVING clause must follow the GROUP BY clause in a query and
must also precede the ORDER BY clause if used.
SELECT column1, column2
FROM table1, table2
WHERE [ conditions ]
GROUP BY column1, column2
HAVING [ conditions ]
ORDER BY column1, column2

85.	 Explain inner join? Write it’s query

	INNER JOIN: The INNER JOIN keyword selects all rows from both the tables as long as the condition satisfies. This keyword will create the result-set by
		   combining all rows from both the tables where the condition satisfies i.e value of the common field will be same.
	Syntax:
		SELECT table1.column1,table1.column2,table2.column1,....
		FROM table1 
		INNER JOIN table2
		ON table1.matching_column = table2.matching_column;

86.	 Types of joins, slowest and fastest amongst them.

Types of Joins are:
1)INNER JOIN: The INNER JOIN keyword selects all rows from both the tables as long as the condition satisfies. This keyword will create the result-set by combining all
              rows from both the tables where the condition satisfies i.e value of the common field will be same.
Syntax:
SELECT table1.column1,table1.column2,table2.column1,....
FROM table1 
INNER JOIN table2
ON table1.matching_column = table2.matching_column;

2)LEFT JOIN: This join returns all the rows of the table on the left side of the join and matching rows for the table on the right side of join. The rows for which there is no matching row on right side, the result-set will contain null. LEFT JOIN is also known as LEFT OUTER JOIN.
Syntax:
SELECT table1.column1,table1.column2,table2.column1,....
FROM table1 
LEFT JOIN table2
ON table1.matching_column = table2.matching_column;

3)RIGHT JOIN: RIGHT JOIN is similar to LEFT JOIN. This join returns all the rows of the table on the right side of the join and matching rows for the table on the left side of join. The rows for which there is no matching row on left side, the result-set will contain null. RIGHT JOIN is also known as RIGHT OUTER JOIN.Syntax:
SELECT table1.column1,table1.column2,table2.column1,....
FROM table1 
RIGHT JOIN table2
ON table1.matching_column = table2.matching_column;

4)FULL JOIN: FULL JOIN creates the result-set by combining result of both LEFT JOIN and RIGHT JOIN. The result-set will contain all the rows from both the tables. The rows for which there is no matching, the result-set will contain NULL values.Syntax:
SELECT table1.column1,table1.column2,table2.column1,....
FROM table1 
FULL JOIN table2
ON table1.matching_column = table2.matching_column;

5)CARTESIAN JOIN: The CARTESIAN JOIN is also known as CROSS JOIN. In a CARTESIAN JOIN there is a join for each row of one table to every row of another table. This 
usually happens when the matching column or WHERE condition is not specified.
SELECT table1.column1 , table1.column2, table2.column1...
FROM table1
CROSS JOIN table2;

6)SELF JOIN: As the name signifies, in SELF JOIN a table is joined to itself. That is, each row of the table is joined with itself and all other rows depending on some conditions. In other words we can say that it is a join between two copies of the same table.Syntax:
SELECT a.coulmn1 , b.column2
FROM table_name a, table_name b
WHERE some_condition;


